/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <android/log.h>

static const char *TAG = "SerialPortHelper";
#define Log_I(fmt, args...) 	__android_log_print(ANDROID_LOG_INFO, TAG, fmt, ##args)
#define Log_D(fmt, args...) 	__android_log_print(ANDROID_LOG_DEBUG, TAG, fmt, ##args)
#define Log_E(fmt, args...) 	__android_log_print(ANDROID_LOG_ERROR, TAG, fmt, ##args)
////////////////////////////////////////////////////////////////////////////////////////////////////

JNIEXPORT jobject JNICALL native_open(JNIEnv *env, jclass thiz, jstring path, jint baudrate);
JNIEXPORT jint JNICALL native_close(JNIEnv *env, jobject thiz);

static const char* className = "com/ztercelstuido/SerialPortUtils/SerialPortHelper"; //指定要注册的类
static JNINativeMethod methods[] = {
        { "open", "(Ljava/lang/String;I)Ljava/io/FileDescriptor;",(void*) native_open },
        { "close", "()I",(void*) native_close },
};

//////////////////////////////////////////////////////////////////////////////////////////////////
JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* vm, void* reserved) {

    JNIEnv* env = NULL;
    jint result = JNI_VERSION_1_4;

    if ((*vm)->GetEnv(vm, (void**) &env, JNI_VERSION_1_4) != JNI_OK) {
        return -1;
    }
    assert(env != NULL);

    jclass clazz;
    clazz = (*env)->FindClass(env, className);
    if (clazz == NULL) {
        return JNI_FALSE;
    }

    int methodSize = sizeof(methods) / sizeof(methods[0]);
    if ((*env)->RegisterNatives(env, clazz, methods, methodSize) < 0) {
        return JNI_FALSE;
    }

    Log_I("JNI_Load function executed.");

    return result;
}